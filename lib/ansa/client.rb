require 'net/http'
require 'rss'
require "ansa/news"
require "ansa/errors"


module Ansa

  private
  def self.get_news_by_url(url)
    news = []
    begin
      rss = RSS::Parser.parse(open(url).read, false).items
    rescue NoMethodError
      raise AnsaError.new("Url #{url} is not a valid RSS source")
    rescue StandardError
      raise AnsaError.new("Error fetching news")
    end
    rss.each do |result|
      news.push(
        News.new(result.title, result.description, result.date, result.link)
      )
    end
    return news
  end

  # @!macro [attach] generate_get_news
  #   @method get_$1_news
  #   @!scope class
  #   @note This method is autogenerated, it fetches $2
  #   Get news for "$1" category.
  #   @since $3
  #   @raise [Ansa::AnsaError] when errors occour fetching news
  #   @return [Array<Ansa::News>] all the news of category "$1".
  def self.generate_get_news(category, value)
    define_singleton_method("get_#{category}_news") do
      get_news_by_url(value)
    end
  end

  public
  # Get news given a category.
  #
  # @param category name, `:text`
  # @raise [Ansa::AnsaError] when errors occour fetching news
  # @since 1.0.0
  # @return [Array<Ansa::News>] all the news of the given category.
  def self.get_news(category)
    if not LINKS.include? category
      raise AnsaError.new("Category #{category} not available")
    end
    get_news_by_url(LINKS[category])
  end

  LINKS.each do |key, value|
    generate_get_news key, value
  end

end
